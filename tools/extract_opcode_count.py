import os
import re

opcodes = ['add', 'push', 'pop', 'or', 'adc', 'sbb', 'and', 'es', 'daa', 'sub', 'cs',
           'das', 'xor', 'ss', 'aaa', 'cmp', 'ds', 'aas', 'inc', 'dec', 'pusha', 'pushad',
		   'popa', 'popad', 'bound', 'arpl', 'fs', 'gs', 'no mnemonic', 'imul', 'ins', 'insb',
		   'insw', 'insd', 'outs', 'outsb', 'outsw', 'outsd', 'jo', 'jno', 'jb', 'jnae', 'jc',
		   'jnb', 'jae', 'jnc', 'jz', 'je', 'jnz', 'jne', 'jbe', 'jna', 'jnbe', 'ja', 'js', 'jns',
		   'jp', 'jpe', 'jnp', 'jpo', 'jl', 'jnge', 'jnl', 'jge', 'jle', 'jng', 'jnle', 'jg', 'test',
		   'xchg', 'mov', 'lea', 'nop', 'pause', 'cbw', 'cwde', 'cwd', 'cdq', 'callf', 'fwait', 'wait',
		   'pushf', 'pushfd', 'popf', 'popfd', 'sahf', 'lahf', 'movs', 'movsb', 'movsw', 'movsd', 'cmps',
		   'cmpsb', 'cmpsw', 'cmpsd', 'stos', 'stosb', 'stosw', 'stosd', 'lods', 'lodsb', 'lodsw', 'lodsd',
		   'scas', 'scasb', 'scasw', 'scasd', 'rol', 'ror', 'rcl', 'rcr', 'shl', 'sal', 'shr', 'sar', 'retn',
		   'les', 'lds', 'enter', 'leave', 'retf', 'int', 'into', 'iret', 'iretd', 'aam', 'amx', 'aad', 'adx',
		   'undefined', 'salc', 'setalc', 'xlat', 'xlatb', 'fadd', 'fmul', 'fcom', 'fcomp', 'fsub', 'fsubr',
		   'fdiv', 'fdivr', 'fld', 'fxch', 'fst', 'fnop', 'fstp', 'fstp1', 'fldenv', 'fchs', 'fabs', 'ftst',
		   'fxam', 'fldcw', 'fld1', 'fldl2t', 'fldl2e', 'fldpi', 'fldlg2', 'fldln2', 'fldz', 'fnstenv', 'fstenv',
		   'f2xm1', 'fyl2x', 'fptan', 'fpatan', 'fxtract', 'fprem1', 'fdecstp', 'fincstp', 'fnstcw', 'fstcw',
		   'fprem', 'fyl2xp1', 'fsqrt', 'fsincos', 'frndint', 'fscale', 'fsin', 'fcos', 'fiadd', 'fcmovb', 'fimul',
		   'fcmove', 'ficom', 'fcmovbe', 'ficomp', 'fcmovu', 'fisub', 'fisubr', 'fucompp', 'fidiv', 'fidivr',
		   'fild', 'fcmovnb', 'fisttp', 'fcmovne', 'fist', 'fcmovnbe', 'fistp', 'fcmovnu', 'fneni', 'nop',
		   'fndisinop', 'fnclex', 'fclex', 'fninit', 'finit', 'fnsetpmnop', 'fucomi', 'fcomi', 'fcom2',
		   'fcomp3', 'ffree', 'fxch4', 'frstor', 'fucom', 'fucomp', 'fnsave', 'fsave', 'fnstsw', 'fstsw',
		   'faddp', 'fmulp', 'fcomp5', 'fcompp', 'fsubrp', 'fsubp', 'fdivrp', 'fdivp', 'ffreep', 'fxch7',
		   'fstp8', 'fstp9', 'fbld', 'fucomip', 'fbstp', 'fcomip', 'loopnz', 'loopne', 'loopz', 'loope',
		   'loop', 'jcxz', 'jecxz', 'in', 'out', 'call', 'jmp', 'jmpf', 'lock', 'int1', 'icebp', 'repnz',
		   'repne', 'rep', 'repz', 'repe', 'hlt', 'cmc', 'not', 'neg', 'mul', 'div', 'idiv', 'clc', 'stc',
		   'cli', 'sti', 'cld', 'std', 'mnemonic', 'sldt', 'str', 'lldt', 'ltr', 'verr', 'verw', 'sgdt',
		   'vmcall', 'vmlaunch', 'vmresume', 'vmxoff', 'sidt', 'monitor', 'mwait', 'lgdt', 'xgetbv', 'xsetbv',
		   'lidt', 'smsw', 'lmsw', 'invlpg', 'rdtscp', 'lar', 'lsl', 'clts', 'invd', 'wbinvd', 'ud2', 'movups',
		   'movss', 'movupd', 'movhlps', 'movlps', 'movlpd', 'movddup', 'movsldup', 'unpcklps', 'unpcklpd',
		   'unpckhps', 'unpckhpd', 'movlhps', 'movhps', 'movhpd', 'movshdup', 'prefetchnta', 'prefetcht0',
		   'prefetcht1', 'prefetcht2', 'hint_nop', 'movaps', 'movapd', 'cvtpi2ps', 'cvtsi2ss', 'cvtpi2pd',
		   'cvtsi2sd', 'movntps', 'movntpd', 'cvttps2pi', 'cvttss2si', 'cvttpd2pi', 'cvttsd2si', 'cvtps2pi',
		   'cvtss2si', 'cvtpd2pi', 'cvtsd2si', 'ucomiss', 'ucomisd', 'comiss', 'comisd', 'wrmsr', 'rdtsc',
		   'rdmsr', 'rdpmc', 'sysenter', 'sysexit', 'getsec', 'pshufb', 'phaddw', 'phaddd', 'phaddsw',
		   'pmaddubsw', 'phsubw', 'phsubd', 'phsubsw', 'psignb', 'psignw', 'psignd', 'pmulhrsw', 'pblendvb',
		   'blendvps', 'blendvpd', 'ptest', 'pabsb', 'pabsw', 'pabsd', 'pmovsxbw', 'pmovsxbd', 'pmovsxbq',
		   'pmovsxwd', 'pmovsxwq', 'pmovsxdq', 'pmuldq', 'pcmpeqq', 'movntdqa', 'packusdw', 'pmovzxbw',
		   'pmovzxbd', 'pmovzxbq', 'pmovzxwd', 'pmovzxwq', 'pmovzxdq', 'pcmpgtq', 'pminsb', 'pminsd', 'pminuw',
		   'pminud', 'pmaxsb', 'pmaxsd', 'pmaxuw', 'pmaxud', 'pmulld', 'phminposuw', 'invept', 'invvpid', 'movbe',
		   'crc32', 'roundps', 'roundpd', 'roundss', 'roundsd', 'blendps', 'blendpd', 'pblendw', 'palignr', 'pextrb',
		   'pextrw', 'pextrd', 'pextrq', 'extractps', 'pinsrb', 'insertps', 'pinsrd', 'pinsrq', 'dpps', 'dppd', 'mpsadbw',
		   'pcmpestrm', 'pcmpestri', 'pcmpistrm', 'pcmpistri', 'cmovo', 'cmovno', 'cmovb', 'cmovnae', 'cmovc', 'cmovnb',
		   'cmovae', 'cmovnc', 'cmovz', 'cmove', 'cmovnz', 'cmovne', 'cmovbe', 'cmovna', 'cmovnbe', 'cmova', 'cmovs', 'cmovns',
		   'cmovp', 'cmovpe', 'cmovnp', 'cmovpo', 'cmovl', 'cmovnge', 'cmovnl', 'cmovge', 'cmovle', 'cmovng', 'cmovnle', 'cmovg',
		   'movmskps', 'movmskpd', 'sqrtps', 'sqrtss', 'sqrtpd', 'sqrtsd', 'rsqrtps', 'rsqrtss', 'rcpps', 'rcpss', 'andps', 'andpd',
		   'andnps', 'andnpd', 'orps', 'orpd', 'xorps', 'xorpd', 'addps', 'addss', 'addpd', 'addsd', 'mulps', 'mulss', 'mulpd',
		   'mulsd', 'cvtps2pd', 'cvtpd2ps', 'cvtss2sd', 'cvtsd2ss', 'cvtdq2ps', 'cvtps2dq', 'cvttps2dq', 'subps', 'subss',
		   'subpd', 'subsd', 'minps', 'minss', 'minpd', 'minsd', 'divps', 'divss', 'divpd', 'divsd', 'maxps', 'maxss',
		   'maxpd', 'maxsd', 'punpcklbw', 'punpcklwd', 'punpckldq', 'packsswb', 'pcmpgtb', 'pcmpgtw', 'pcmpgtd',
		   'packuswb', 'punpckhbw', 'punpckhwd', 'punpckhdq', 'packssdw', 'punpcklqdq', 'punpckhqdq', 'movd',
		   'movq', 'movdqa', 'movdqu', 'pshufw', 'pshuflw', 'pshufhw', 'pshufd', 'psrlw', 'psraw', 'psllw',
		   'psrld', 'psrad', 'pslld', 'psrlq', 'psrldq', 'psllq', 'pslldq', 'pcmpeqb', 'pcmpeqw', 'pcmpeqd',
		   'emms', 'vmread', 'vmwrite', 'haddpd', 'haddps', 'hsubpd', 'hsubps', 'seto', 'setno', 'setb', 'setnae',
		   'setc', 'setnb', 'setae', 'setnc', 'setz', 'sete', 'setnz', 'setne', 'setbe', 'setna', 'setnbe', 'seta',
		   'sets', 'setns', 'setp', 'setpe', 'setnp', 'setpo', 'setl', 'setnge', 'setnl', 'setge', 'setle', 'setng',
		   'setnle', 'setg', 'cpuid', 'bt', 'shld', 'rsm', 'bts', 'shrd', 'fxsave', 'fxrstor', 'ldmxcsr', 'stmxcsr',
		   'xsave', 'lfence', 'xrstor', 'mfence', 'sfence', 'clflush', 'cmpxchg', 'lss', 'btr', 'lfs', 'lgs', 'movzx',
		   'popcnt', 'ud', 'btc', 'bsf', 'bsr', 'movsx', 'xadd', 'cmpps', 'cmpss', 'cmppd', 'movnti', 'pinsrw', 'shufps',
		   'shufpd', 'cmpxchg8b', 'vmptrld', 'vmclear', 'vmxon', 'vmptrst', 'bswap', 'addsubpd', 'addsubps', 'paddq', 'pmullw',
		   'movq2dq', 'movdq2q', 'pmovmskb', 'psubusb', 'psubusw', 'pminub', 'pand', 'paddusb', 'paddusw', 'pmaxub', 'pandn',
		   'pavgb', 'pavgw', 'pmulhuw', 'pmulhw', 'cvtpd2dq', 'cvttpd2dq', 'cvtdq2pd', 'movntq', 'movntdq', 'psubsb', 'psubsw',
		   'pminsw', 'por', 'paddsb', 'paddsw', 'pmaxsw', 'pxor', 'lddqu', 'pmuludq', 'pmaddwd', 'psadbw', 'maskmovq', 'maskmovdqu',
		   'psubb', 'psubw', 'psubd', 'psubq', 'paddb', 'paddw', 'paddd']
#print opcodes.__len__()


def test():

    fl = open('./crunchedTrainLabels.csv','r')
    labeldata = fl.readlines()
    fl.close()
    f = open('./labersopcodes3.csv','w')
    # deal with the first line (feature names)
    f.write(labeldata[0].replace('\n','')+',' + str(opcodes).replace('[','').replace(']','').replace("'","") + '\n')

    for i in range(1,len(labeldata)):
        line = labeldata[i].replace('\n','')+','
        id = labeldata[i][0:20]

        f_asm = open('./{}.asm'.format(id),'r')
        asm_data = f_asm.readlines()
        f_asm.close()
        for j in range(0,len(opcodes)):
            tmpcount = 0
            for k in range(0,len(asm_data)):
                if ' {} '.format(opcodes[j]) in asm_data[k]:
                    tmpcount += 1
            line += str(tmpcount) + ','
        f.write(line+'\n')
        print '{} is done'.format(id)
    print 'All is done'


    f.close()

test()
